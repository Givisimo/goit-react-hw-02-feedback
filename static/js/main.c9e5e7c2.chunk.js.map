{"version":3,"sources":["components/Statistic/Statistic.jsx","components/Statistics/Statistics.jsx","components/Button/Button.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","components/App/App.jsx","index.js"],"names":["Statistic","label","value","Statistics","good","neutral","bad","total","positivePercentage","Button","name","handleClick","onClick","type","FeedbackOptions","options","onLeaveFeedback","keys","Object","map","key","Section","title","children","Notification","message","App","state","handleChoice","e","preventDefault","currentTarget","setState","this","countTotalFeedback","bind","toFixed","className","countPositiveFeedbackPercentage","Component","ReactDOM","render","document","getElementById"],"mappings":"oOAgBeA,G,MAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC1B,OACE,2BACGD,EADH,IACWC,KCqBAC,EAvBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,6BACE,kBAAC,EAAD,CAAWP,MAAM,OAAOC,MAAOE,IAC/B,kBAAC,EAAD,CAAWH,MAAM,UAAUC,MAAOG,IAClC,kBAAC,EAAD,CAAWJ,MAAM,MAAMC,MAAOI,IAC9B,kBAAC,EAAD,CAAWL,MAAM,QAAQC,MAAOK,IAChC,kBAAC,EAAD,CACEN,MAAM,oBACNC,MAAOK,EAAQ,EAAR,UAAeC,EAAf,cCGAC,EAbA,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACtB,OACE,4BAAQC,QAASD,EAAaE,KAAK,SAASH,KAAMA,GAC/CA,ICkBQI,EApBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAC5BC,EAAOC,OAAOD,KAAKF,GACzB,OACE,oCACGE,EAAKE,KAAI,SAAAC,GAAG,OACX,kBAAC,EAAD,CAAQV,KAAMU,EAAKT,YAAaK,EAAiBI,IAAKA,SCQ/CC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,iCACE,4BAAKD,GACJC,ICIQC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,2BAAIA,ICsDEC,E,2MAlDbC,MAAQ,CACNvB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPsB,aAAe,SAAAC,GACbA,EAAEC,iBADgB,IAEVpB,EAASmB,EAAEE,cAAXrB,KACR,EAAKsB,UAAS,SAAAL,GAAK,sBAAQjB,EAAOiB,EAAMjB,GAAQ,O,oFAG5B,IAAD,EACYuB,KAAKN,MACpC,OAFmB,EACXvB,KADW,EACLC,QADK,EACIC,M,wDAMvB,OADiB2B,KAAKN,MAAdvB,KACQ6B,KAAKC,mBAAmBC,KAAKF,KAA7BA,GAAwC,KAAKG,QAAQ,K,+BAG7D,IAAD,EACwBH,KAAKN,MAA5BvB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,yBAAK+B,UAAU,OACb,kBAAC,EAAD,CAASf,MAAM,yBACb,6BACE,kBAAC,EAAD,CACEP,QAASkB,KAAKN,MACdX,gBAAiBiB,KAAKL,gBAGzBK,KAAKC,qBAAuB,EAC3B,kBAAC,EAAD,CACE9B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLE,mBAAoByB,KAAKK,kCACzB/B,MAAO0B,KAAKC,uBAGd,kBAAC,EAAD,CAAcT,QAAQ,4B,GA3ChBc,aCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.c9e5e7c2.chunk.js","sourcesContent":["import React from 'react';\nimport T from 'prop-types';\n\nconst Statistic = ({ label, value }) => {\n  return (\n    <p>\n      {label}:{value}\n    </p>\n  );\n};\n\nStatistic.propTypes = {\n  label: T.string.isRequired,\n  value: T.oneOfType([T.string, T.number]).isRequired,\n};\n\nexport default Statistic;\n","import React from 'react';\nimport T from 'prop-types';\nimport Statistic from '../Statistic/Statistic';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div>\n      <Statistic label=\"Good\" value={good} />\n      <Statistic label=\"Neutral\" value={neutral} />\n      <Statistic label=\"Bad\" value={bad} />\n      <Statistic label=\"Total\" value={total} />\n      <Statistic\n        label=\"Positive feedback\"\n        value={total > 0 ? `${positivePercentage}%` : `0%`}\n      />\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  good: T.number.isRequired,\n  neutral: T.number.isRequired,\n  bad: T.number.isRequired,\n  total: T.number.isRequired,\n  positivePercentage: T.string.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport T from 'prop-types';\n\nconst Button = ({ name, handleClick }) => {\n  return (\n    <button onClick={handleClick} type=\"button\" name={name}>\n      {name}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  name: T.string.isRequired,\n  handleClick: T.func.isRequired,\n};\n\nexport default Button;\n","import React from 'react';\nimport T from 'prop-types';\nimport Button from '../Button/Button';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  const keys = Object.keys(options);\n  return (\n    <>\n      {keys.map(key => (\n        <Button name={key} handleClick={onLeaveFeedback} key={key} />\n      ))}\n    </>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: T.shape({\n    good: T.number.isRequired,\n    neutral: T.number.isRequired,\n    bad: T.number.isRequired,\n  }).isRequired,\n  onLeaveFeedback: T.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport T from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: T.string.isRequired,\n  children: T.node.isRequired,\n};\n\nexport default Section;\n","import React from 'react';\nimport T from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: T.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Statistics from '../Statistics/Statistics';\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\nimport Section from '../Section/Section';\nimport Notification from '../Notification/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleChoice = e => {\n    e.preventDefault();\n    const { name } = e.currentTarget;\n    this.setState(state => ({ [name]: state[name] + 1 }));\n  };\n\n  countTotalFeedback() {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  }\n\n  countPositiveFeedbackPercentage() {\n    const { good } = this.state;\n    return ((good / this.countTotalFeedback.bind(this)()) * 100).toFixed(0);\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <div className=\"App\">\n        <Section title=\"Please leave feedback\">\n          <div>\n            <FeedbackOptions\n              options={this.state}\n              onLeaveFeedback={this.handleChoice}\n            />\n          </div>\n          {this.countTotalFeedback() > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n              total={this.countTotalFeedback()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}